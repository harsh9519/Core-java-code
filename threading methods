--threading are used to help to run the multiple user request at same time every user has own thraed are made so that every thread complete own task completely. 
--thread are used to acces any website no of user at same time.it is used to manage the traffic.


package thread;

public class A extends Thread {
	@Override
	public void run()   // after start run state
	{
		if (Thread.currentThread().getName().equalsIgnoreCase("rohit"))
		{
			mohit();
		}
		else
		{
			rohit();
		}
	}

	void mohit()
	{
		for(int i = 1;i<=10;i++)
		{
			System.out.println(i);
		}
	}
	void rohit()
	{
		for (char i = 'A' ; i<='Z' ; i++)
		{
			System.out.println(i);
		}
	}
	
------priority program assign priority

package thread;

public class A extends Thread {


	@Override
	public void run()
	{
		if (Thread.currentThread().getName().equalsIgnoreCase("rohit"))
		{
			mohit();
		}
		else
		{
			rohit();
		}
	}

	void mohit()
	{
		for(int i = 1;i<=10;i++)
		{
			System.out.println(i+" "+currentThread().getPriority());
		}
	}
	void rohit()
	{
		for (char i = 'A' ; i<='Z' ; i++)
		{
			System.out.println(i+" "+currentThread().getPriority());
		}
	}

	public static void main(String[] args) {
		
		A o1 = new A();
		o1.setName("mohit");
		o1.setPriority(MAX_PRIORITY);
		o1.start();
		
		A o2 = new A();
		o2.setName("rohit");
		o2.setPriority(MAX_PRIORITY);
		o2.start();
		// TODO Auto-generated method stub

	}



}

----Demon method are used to run the support the process when main program are face problem

package thread;

public class A extends Thread {




	private static final boolean True = false;

	@Override
	public void run()
	{
		if (Thread.currentThread().getName().equalsIgnoreCase("rohit"))
		{
			mohit();
		}
		else
		{
			rohit();
		}
	}

	void mohit()
	{
		for(int i = 1;i<=10;i++)
		{
			System.out.println(i);
		}
	}
	void rohit()
	{
		for (char i = 'A' ; i<='Z' ; i++)
		{
			System.out.println(i);
		}
	}

	public static void main(String[] args) {
		
		A o1 = new A();
		o1.setName("mohit");


		
		A o2 = new A();
		o2.setName("rohit");

		o2.setDaemon(True);
		o1.start();
		o2.start();
		// TODO Auto-generated method stub

	}
}

---- join method are used to run main thread completely first then after the second thread are run

package thread;

public class A extends Thread {


	@Override
	public void run()
	{
		if (Thread.currentThread().getName().equalsIgnoreCase("rohit"))
		{
			mohit();
		}
		else
		{
			rohit();
		}
	}

	void mohit()
	{
		for(int i = 1;i<=10;i++)
		{
			System.out.println(i);
		}
	}
	void rohit()
	{
		for (char i = 'A' ; i<='Z' ; i++)
		{
			System.out.println(i);
		}
	}

	public static void main(String[] args) {
		
		A o1 = new A();
		o1.setName("mohit");


		
		A o2 = new A();
		o2.setName("rohit");

		try {
			o1.start();
			o1.join();
		}catch(Exception e) {
			o2.start();
		}
		// TODO Auto-generated method stub

	}
}

------without use extends thread method run the thread

package thread;

class B {

    void series() {
        for (char i = 'A'; i <= 'Z'; i++) {
            System.out.println(i);
        }
    }

    void table() {
        for (int i = 1; i <= 26; i++) {
            System.out.println(i);
        }
    }

}

public class A {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

        B o = new B();

        Thread t1 = new Thread() {
            public void run() {
                o.series();
            };
        };
        Thread t2 = new Thread() {
            @Override
            public void run() {
                o.table();
            }
        };

        t1.setName("Thread - 1");
        t2.setName("Thread - 2");

        t1.start();
        t2.start();

    }

}



	public static void main(String[] args) {
		
		A o1 = new A();    //thread 1
		o1.setName("mohit");
		o1.start();   // first start
		
		A o2 = new A();   //thread 2
		o2.setName("rohit");
		o2.start();
		// TODO Auto-generated method stub

	}

}

-----this is used single object to run a multithread operation

class B implements Runnable {
    @Override
    public void run() {

        if (Thread.currentThread().getName().equals("Thread - 1")) {
            series();
        } else {
            table();
        }
    }

    void series() {
        for (char i = 'A'; i <= 'Z'; i++) {
            System.out.println(i);
        }
    }

    void table() {
        for (int i = 1; i <= 26; i++) {
            System.out.println(i);
        }
    }

}

public class A {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

        B o = new B();

        Thread t1 = new Thread(o);
        Thread t2 = new Thread(o);

        t1.setName("Thread - 1");
        t2.setName("Thread - 2");

        t1.start();
        t2.start();

    }

}
